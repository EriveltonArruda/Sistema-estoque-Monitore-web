// Importa o tipo `Metadata` do Next.js, usado para definir metadados da página (como título e descrição para SEO).
import type { Metadata } from "next";
// Importa as fontes Geist e Geist_Mono do pacote `next/font/google`.
// Esta é a forma recomendada pelo Next.js para otimizar o carregamento de fontes.
import { Geist, Geist_Mono } from "next/font/google";
// Importa o arquivo CSS global da sua aplicação. Este CSS será aplicado a todas as páginas.
import "./globals.css";

// --- Configuração das Fontes ---

// Carrega a fonte 'Geist Sans' (variante sem ser monoespaçada).
// `subsets: ["latin"]` especifica quais subconjuntos de caracteres devem ser pré-carregados (aqui, caracteres latinos).
// `variable: "--font-geist-sans"` define uma variável CSS personalizada para essa fonte,
// o que permite referenciá-la facilmente em seus arquivos CSS.
const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

// Carrega a fonte 'Geist Mono' (variante monoespaçada, geralmente usada para código).
// Semelhante à fonte Geist Sans, mas para a versão monoespaçada.
const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

// --- Metadados da Aplicação ---

// `metadata` é um objeto especial exportado no Next.js App Router.
// Ele é usado para definir metadados para a sua aplicação, como o título que aparece na aba do navegador
// e a descrição para motores de busca.
export const metadata: Metadata = {
  title: "Create Next App", // Título padrão da aplicação. Você pode alterá-lo.
  description: "Generated by create next app", // Descrição padrão. Também pode ser alterada.
};

// --- Componente `RootLayout` ---

/**
 * `RootLayout` é um componente **obrigatório** no Next.js App Router.
 * Ele define a estrutura HTML base (<html> e <body>) para todas as páginas da sua aplicação.
 * Tudo o que é definido aqui estará presente em cada página.
 *
 * @param {Readonly<{ children: React.ReactNode; }>} { children }
 * `children` é uma prop especial do React que representa o conteúdo aninhado.
 * No caso do RootLayout, `children` serão os componentes de página e outros layouts que você definir.
 */
export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    // Define a tag <html> principal da página, com o atributo `lang="en"` (idioma inglês).
    // Você pode mudar para `lang="pt-BR"` se sua aplicação for em português.
    <html lang="en">
      {/* Define a tag <body> da página. */}
      {/*
        As classes CSS aqui aplicam as variáveis de fonte definidas acima
        (para que as fontes Geist fiquem disponíveis globalmente)
        e a classe `antialiased` (geralmente usada para suavizar a renderização de texto).
      */}
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {/*
          A prop `children` é renderizada aqui.
          Isso significa que o conteúdo de todas as suas outras páginas (como `page.tsx` ou outros layouts)
          será inserido dentro deste <body>.
        */}
        {children}
      </body>
    </html>
  );
}